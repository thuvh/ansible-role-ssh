---
- name: check if user exists
  getent:
    database: passwd
    key: '{{ ssh_username }}'
    fail_key: false
  when: ssh_username is defined

- name: create user if user does not exist
  user:
    name: '{{ ssh_username }}'
    groups: '{{ ssh_user_groups }}'
    shell: /bin/bash
    append: true
  when: ssh_username is defined and ssh_username in getent_passwd and getent_passwd['ssh_username'] is not defined
  become: true

- name: set username if variable is not defined
  set_fact:
    ssh_username: '{{ ansible_facts.user_id }}'
  when: ssh_username is not defined

- name: query user information
  getent:
    database: passwd
    key: '{{ ssh_username }}'

- name: set home directory for user
  set_fact:
    ssh_home: '{{ getent_passwd[ssh_username][-2] }}'

- name: create dot ssh directory
  file:
    path: "{{ ssh_home }}/.ssh"
    owner: "{{ ssh_username }}"
    group: "{{ ssh_username }}"
    mode: '0700'
    state: directory
  become: true
  become_user: '{{ ssh_username }}'

- name: upload ssh private key
  template:
    src: "id_rsa.j2"
    dest: "{{ ssh_home }}/.ssh/id_rsa"
    owner: "{{ ssh_username }}"
    group: "{{ ssh_username }}"
    mode: "0600"
  become: true
  become_user: '{{ ssh_username }}'
  when: >
    ssh_default_private_key is defined and
    ssh_default_private_key | length > 0 and
    ssh_default_public_key is defined and
    ssh_default_public_key | length > 0

- name: upload ssh public key
  template:
    src: "id_rsa.pub.j2"
    dest: "{{ ssh_home }}/.ssh/id_rsa.pub"
    owner: "{{ ssh_username }}"
    group: "{{ ssh_username }}"
    mode: "0644"
  become: true
  become_user: '{{ ssh_username }}'
  when: >
    ssh_default_private_key is defined and
    ssh_default_private_key | length > 0 and
    ssh_default_public_key is defined and
    ssh_default_public_key | length > 0

- name: authorized_keys init
  set_fact:
    ssh_authorized_keys: []
  become: true
  become_user: '{{ ssh_username }}'

- name: authorized_keys get keys
  set_fact:
    ssh_authorized_keys: >-
      {{
      ssh_authorized_keys + lookup(
      'url',
      'https://gitlab.com/' + item + '.keys',
      headers={ 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko)
      Chrome/83.0.4103.97 Safari/537.36'},
      wantlist=True)
      }}
  with_items: "{{ ssh_gitlab_usernames }}"
  become: true
  become_user: '{{ ssh_username }}'

- name: authorized_keys collect all keys
  set_fact:
    ssh_authorized_keys: "{{ ssh_authorized_keys + ssh_manual_public_keys }}"
  become: true
  become_user: '{{ ssh_username }}'

- name: authorized_keys collect default public key
  set_fact:
    ssh_authorized_keys: "{{ ssh_authorized_keys + [ ssh_default_public_key ] }}"
  become: true
  become_user: '{{ ssh_username }}'
  when: >
    ssh_default_private_key is defined and
    ssh_default_private_key | length > 0 and
    ssh_default_public_key is defined and
    ssh_default_public_key | length > 0

- name: set authorized keys taken from variables
  authorized_key:
    user: "{{ ssh_username }}"
    state: present
    key: "{{ ssh_authorized_keys | join('\n') }}"
    exclusive: "yes"
  become: true
  become_user: '{{ ssh_username }}'
